@page "/CardList"

<h3>CardList</h3>

<_CardCreateModal @ref="CardCreateModal"/>
<_CardRemoveModal @ref="CardRemoveModal" />
<_CardEditModal @ref="CardEditModal" />
<_CardDetailModal @ref="CardDetailModal" />

@if (ViewModel is not null)
{
    @* <FluentButton Appearance="Appearance.Accent" OnClick="AsyncInvokeCreateCardModal">カードの発行</FluentButton> *@
    <FluentButton Appearance="Appearance.Accent" OnClick="@(() => CardCreateModal.OnShow())">カードの発行</FluentButton>

    <FluentDataGrid Items="ViewModel.CardList.AsQueryable()">
        <PropertyColumn Property="@(item => item.Title)" Sortable="true" />
        <PropertyColumn Property="@(item => item.CreateAt)" Sortable="true" />
        <PropertyColumn Property="@(item => item.DeadLine)" Sortable="true" />
        <PropertyColumn Property="@(item => item.Description)" Sortable="true" />
        <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton Appearance="@Appearance.Accent" OnClick="@(() => CardDetailModal.OnShow(context.Uid))">詳細</FluentButton>
            <FluentButton Appearance="@Appearance.Lightweight" OnClick="@(() => CardEditModal.OnShow(context.Uid))">編集</FluentButton>
            <FluentButton Appearance="@Appearance.Stealth" OnClick="@(() => CardRemoveModal.OnShow(context.Uid))">削除</FluentButton>
        </TemplateColumn> 
    </FluentDataGrid>
}